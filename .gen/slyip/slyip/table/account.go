//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Account = newAccountTable("slyip", "account", "")

type accountTable struct {
	postgres.Table

	//Columns
	ID                postgres.ColumnString
	FirstName         postgres.ColumnString
	LastName          postgres.ColumnString
	Phone             postgres.ColumnString
	Email             postgres.ColumnString
	IsEmailVerified   postgres.ColumnBool
	IsPhoneVerified   postgres.ColumnBool
	PasswordHashed    postgres.ColumnString
	InvitationCode    postgres.ColumnString
	Role              postgres.ColumnString
	LastUsedSlyWallet postgres.ColumnString
	CreatedAt         postgres.ColumnTimestampz
	UpdatedAt         postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AccountTable struct {
	accountTable

	EXCLUDED accountTable
}

// AS creates new AccountTable with assigned alias
func (a AccountTable) AS(alias string) *AccountTable {
	return newAccountTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AccountTable with assigned schema name
func (a AccountTable) FromSchema(schemaName string) *AccountTable {
	return newAccountTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AccountTable with assigned table prefix
func (a AccountTable) WithPrefix(prefix string) *AccountTable {
	return newAccountTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AccountTable with assigned table suffix
func (a AccountTable) WithSuffix(suffix string) *AccountTable {
	return newAccountTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAccountTable(schemaName, tableName, alias string) *AccountTable {
	return &AccountTable{
		accountTable: newAccountTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newAccountTableImpl("", "excluded", ""),
	}
}

func newAccountTableImpl(schemaName, tableName, alias string) accountTable {
	var (
		IDColumn                = postgres.StringColumn("id")
		FirstNameColumn         = postgres.StringColumn("first_name")
		LastNameColumn          = postgres.StringColumn("last_name")
		PhoneColumn             = postgres.StringColumn("phone")
		EmailColumn             = postgres.StringColumn("email")
		IsEmailVerifiedColumn   = postgres.BoolColumn("is_email_verified")
		IsPhoneVerifiedColumn   = postgres.BoolColumn("is_phone_verified")
		PasswordHashedColumn    = postgres.StringColumn("password_hashed")
		InvitationCodeColumn    = postgres.StringColumn("invitation_code")
		RoleColumn              = postgres.StringColumn("role")
		LastUsedSlyWalletColumn = postgres.StringColumn("last_used_sly_wallet")
		CreatedAtColumn         = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn         = postgres.TimestampzColumn("updated_at")
		allColumns              = postgres.ColumnList{IDColumn, FirstNameColumn, LastNameColumn, PhoneColumn, EmailColumn, IsEmailVerifiedColumn, IsPhoneVerifiedColumn, PasswordHashedColumn, InvitationCodeColumn, RoleColumn, LastUsedSlyWalletColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns          = postgres.ColumnList{FirstNameColumn, LastNameColumn, PhoneColumn, EmailColumn, IsEmailVerifiedColumn, IsPhoneVerifiedColumn, PasswordHashedColumn, InvitationCodeColumn, RoleColumn, LastUsedSlyWalletColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return accountTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		FirstName:         FirstNameColumn,
		LastName:          LastNameColumn,
		Phone:             PhoneColumn,
		Email:             EmailColumn,
		IsEmailVerified:   IsEmailVerifiedColumn,
		IsPhoneVerified:   IsPhoneVerifiedColumn,
		PasswordHashed:    PasswordHashedColumn,
		InvitationCode:    InvitationCodeColumn,
		Role:              RoleColumn,
		LastUsedSlyWallet: LastUsedSlyWalletColumn,
		CreatedAt:         CreatedAtColumn,
		UpdatedAt:         UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
