//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var InvitationCode = newInvitationCodeTable("slyip", "invitation_code", "")

type invitationCodeTable struct {
	postgres.Table

	//Columns
	Code            postgres.ColumnString
	TransactionHash postgres.ColumnString
	ExpiresAt       postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type InvitationCodeTable struct {
	invitationCodeTable

	EXCLUDED invitationCodeTable
}

// AS creates new InvitationCodeTable with assigned alias
func (a InvitationCodeTable) AS(alias string) *InvitationCodeTable {
	return newInvitationCodeTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new InvitationCodeTable with assigned schema name
func (a InvitationCodeTable) FromSchema(schemaName string) *InvitationCodeTable {
	return newInvitationCodeTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new InvitationCodeTable with assigned table prefix
func (a InvitationCodeTable) WithPrefix(prefix string) *InvitationCodeTable {
	return newInvitationCodeTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new InvitationCodeTable with assigned table suffix
func (a InvitationCodeTable) WithSuffix(suffix string) *InvitationCodeTable {
	return newInvitationCodeTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newInvitationCodeTable(schemaName, tableName, alias string) *InvitationCodeTable {
	return &InvitationCodeTable{
		invitationCodeTable: newInvitationCodeTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newInvitationCodeTableImpl("", "excluded", ""),
	}
}

func newInvitationCodeTableImpl(schemaName, tableName, alias string) invitationCodeTable {
	var (
		CodeColumn            = postgres.StringColumn("code")
		TransactionHashColumn = postgres.StringColumn("transaction_hash")
		ExpiresAtColumn       = postgres.TimestampzColumn("expires_at")
		allColumns            = postgres.ColumnList{CodeColumn, TransactionHashColumn, ExpiresAtColumn}
		mutableColumns        = postgres.ColumnList{TransactionHashColumn, ExpiresAtColumn}
	)

	return invitationCodeTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Code:            CodeColumn,
		TransactionHash: TransactionHashColumn,
		ExpiresAt:       ExpiresAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
